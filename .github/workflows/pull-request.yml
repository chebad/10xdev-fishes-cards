name: Pull Request Workflow

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Instalacja zależności
        run: npm ci

      - name: Lintowanie kodu
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Instalacja zależności
        run: npm ci

      - name: Uruchomienie testów unit z coverage
        run: npm run test:coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: coverage/
          retention-days: 30

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Instalacja zależności
        run: npm ci

      - name: Instalacja przeglądarek Playwright
        run: npx playwright install chromium

      - name: Uruchomienie testów E2E
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: always() && github.event.pull_request.draft == false
    permissions:
      pull-requests: write

    steps:
      - name: Comment PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            const lintResult = '${{ needs.lint.result }}';
            const unitTestsResult = '${{ needs.unit-tests.result }}';
            const e2eTestsResult = '${{ needs.e2e-tests.result }}';
            
            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const allPassed = lintResult === 'success' && 
                             unitTestsResult === 'success' && 
                             e2eTestsResult === 'success';
            
            const comment = `
            ## 🔍 Status Pull Requesta
            
            ${allPassed ? '🎉 **Wszystkie sprawdzenia przeszły pomyślnie!**' : '⚠️ **Niektóre sprawdzenia nie powiodły się**'}
            
            | Sprawdzenie | Status | Wynik |
            |-------------|---------|--------|
            | Linting | ${getEmoji(lintResult)} | ${lintResult} |
            | Unit Tests | ${getEmoji(unitTestsResult)} | ${unitTestsResult} |
            | E2E Tests | ${getEmoji(e2eTestsResult)} | ${e2eTestsResult} |
            
            ${allPassed ? 
              '✨ Pull Request jest gotowy do przeglądu i merge!' : 
              '🔧 Proszę naprawić błędy przed kontynuowaniem.'
            }
            
            ---
            *Ten komentarz został wygenerowany automatycznie przez GitHub Actions*
            `;
            
            // Sprawdź czy istnieją już komentarze od bota
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔍 Status Pull Requesta')
            );
            
            if (botComment) {
              // Zaktualizuj istniejący komentarz
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Utwórz nowy komentarz
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
            } 